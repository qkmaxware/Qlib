<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="compiler_8hpp" kind="file" language="C++">
    <compoundname>compiler.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">vector</includes>
    <includes local="no">stack</includes>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">algorithm</includes>
    <includes refid="lexer_8hpp" local="yes">./lexer.hpp</includes>
    <includes refid="parser_8hpp" local="yes">./parser.hpp</includes>
    <includes refid="runtime_8hpp" local="yes">./runtime.hpp</includes>
    <includes refid="scanner_8hpp" local="yes">./scanner.hpp</includes>
    <includedby refid="runtime_2main_8cpp" local="yes">src/runtime/main.cpp</includedby>
    <includedby refid="qcircuit__exporter_8hpp" local="yes">src/runtime/qcircuit_exporter.hpp</includedby>
    <incdepgraph>
      <node id="2120">
        <label>./gates/qft.hpp</label>
        <link refid="qft_8hpp"/>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2094" relation="include">
        </childnode>
        <childnode refid="2095" relation="include">
        </childnode>
      </node>
      <node id="2091">
        <label>limits</label>
      </node>
      <node id="2088">
        <label>./general/object.hpp</label>
        <link refid="object_8hpp"/>
        <childnode refid="2089" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2082" relation="include">
        </childnode>
        <childnode refid="2092" relation="include">
        </childnode>
        <childnode refid="2093" relation="include">
        </childnode>
      </node>
      <node id="2086">
        <label>./runtime.hpp</label>
        <link refid="runtime_8hpp"/>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2087" relation="include">
        </childnode>
      </node>
      <node id="2090">
        <label>stdint.h</label>
      </node>
      <node id="2099">
        <label>stdlib.h</label>
      </node>
      <node id="2100">
        <label>./math/matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="2098" relation="include">
        </childnode>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2095" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
      </node>
      <node id="2094">
        <label>./general/constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="2095" relation="include">
        </childnode>
        <childnode refid="2096" relation="include">
        </childnode>
      </node>
      <node id="2102">
        <label>./quantum/systems/qubit.hpp</label>
        <link refid="qubit_8hpp"/>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2098" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2095" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
      </node>
      <node id="2096">
        <label>cmath</label>
      </node>
      <node id="2103">
        <label>./../gates/igate.hpp</label>
        <link refid="igate_8hpp"/>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2098" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
      </node>
      <node id="2101">
        <label>stdexcept</label>
      </node>
      <node id="2114">
        <label>./gates/phase.hpp</label>
        <link refid="phase_8hpp"/>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2095" relation="include">
        </childnode>
        <childnode refid="2096" relation="include">
        </childnode>
        <childnode refid="2094" relation="include">
        </childnode>
      </node>
      <node id="2078">
        <label>string</label>
      </node>
      <node id="2107">
        <label>./gates/ident.hpp</label>
        <link refid="ident_8hpp"/>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
      </node>
      <node id="2104">
        <label>system.hpp</label>
        <link refid="system_8hpp"/>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2098" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
      </node>
      <node id="2077">
        <label>map</label>
      </node>
      <node id="2081">
        <label>regex</label>
      </node>
      <node id="2082">
        <label>exception</label>
      </node>
      <node id="2074">
        <label>fstream</label>
      </node>
      <node id="2084">
        <label>./parser.hpp</label>
        <link refid="parser_8hpp"/>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
      </node>
      <node id="2121">
        <label>./quantum/systems/ensemble.hpp</label>
        <link refid="ensemble_8hpp"/>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
      </node>
      <node id="2092">
        <label>random</label>
      </node>
      <node id="2108">
        <label>onequbitgate.hpp</label>
        <link refid="onequbitgate_8hpp"/>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
      </node>
      <node id="2118">
        <label>./gates/toffoli.hpp</label>
        <link refid="toffoli_8hpp"/>
        <childnode refid="2119" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
      </node>
      <node id="2098">
        <label>./math/complex.hpp</label>
        <link refid="complex_8hpp"/>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2095" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
      </node>
      <node id="2111">
        <label>./gates/pauliX.hpp</label>
        <link refid="pauliX_8hpp"/>
        <childnode refid="2108" relation="include">
        </childnode>
      </node>
      <node id="2076">
        <label>stack</label>
      </node>
      <node id="2075">
        <label>vector</label>
      </node>
      <node id="2112">
        <label>./gates/pauliY.hpp</label>
        <link refid="pauliY_8hpp"/>
        <childnode refid="2108" relation="include">
        </childnode>
      </node>
      <node id="2087">
        <label>./../core/qlib.h</label>
        <link refid="qlib_8h"/>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2089" relation="include">
        </childnode>
        <childnode refid="2094" relation="include">
        </childnode>
        <childnode refid="2097" relation="include">
        </childnode>
        <childnode refid="2098" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2102" relation="include">
        </childnode>
        <childnode refid="2105" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2121" relation="include">
        </childnode>
      </node>
      <node id="2115">
        <label>./gates/cnot.hpp</label>
        <link refid="cnot_8hpp"/>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
      </node>
      <node id="2072">
        <label>src/runtime/compiler.hpp</label>
        <link refid="compiler.hpp"/>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
        <childnode refid="2078" relation="include">
        </childnode>
        <childnode refid="2079" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2084" relation="include">
        </childnode>
        <childnode refid="2086" relation="include">
        </childnode>
        <childnode refid="2122" relation="include">
        </childnode>
      </node>
      <node id="2083">
        <label>sstream</label>
      </node>
      <node id="2113">
        <label>./gates/pauliZ.hpp</label>
        <link refid="pauliZ_8hpp"/>
        <childnode refid="2108" relation="include">
        </childnode>
      </node>
      <node id="2105">
        <label>./quantum/systems/qreg.hpp</label>
        <link refid="qreg_8hpp"/>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2098" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2091" relation="include">
        </childnode>
        <childnode refid="2095" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
      </node>
      <node id="2117">
        <label>./gates/cz.hpp</label>
        <link refid="cz_8hpp"/>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2113" relation="include">
        </childnode>
      </node>
      <node id="2095">
        <label>math.h</label>
      </node>
      <node id="2097">
        <label>./general/properties.h</label>
        <link refid="properties_8h"/>
      </node>
      <node id="2073">
        <label>iostream</label>
      </node>
      <node id="2080">
        <label>./lexer.hpp</label>
        <link refid="lexer_8hpp"/>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2081" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2082" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
      </node>
      <node id="2110">
        <label>./gates/hadamard.hpp</label>
        <link refid="hadamard_8hpp"/>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
      </node>
      <node id="2106">
        <label>./quantum/standard_gates.hpp</label>
        <link refid="standard__gates_8hpp"/>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
        <childnode refid="2112" relation="include">
        </childnode>
        <childnode refid="2113" relation="include">
        </childnode>
        <childnode refid="2114" relation="include">
        </childnode>
        <childnode refid="2115" relation="include">
        </childnode>
        <childnode refid="2116" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2118" relation="include">
        </childnode>
        <childnode refid="2120" relation="include">
        </childnode>
      </node>
      <node id="2122">
        <label>./scanner.hpp</label>
        <link refid="scanner_8hpp"/>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
      </node>
      <node id="2093">
        <label>chrono</label>
      </node>
      <node id="2116">
        <label>./gates/cy.hpp</label>
        <link refid="cy_8hpp"/>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2112" relation="include">
        </childnode>
      </node>
      <node id="2079">
        <label>algorithm</label>
      </node>
      <node id="2089">
        <label>./types.h</label>
        <link refid="types_8h"/>
        <childnode refid="2090" relation="include">
        </childnode>
        <childnode refid="2091" relation="include">
        </childnode>
      </node>
      <node id="2109">
        <label>controlledgate.hpp</label>
        <link refid="controlledgate_8hpp"/>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
      </node>
      <node id="2085">
        <label>memory</label>
      </node>
      <node id="2119">
        <label>controlled2gate.hpp</label>
        <link refid="controlled2gate_8hpp"/>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2124">
        <label>src/runtime/main.cpp</label>
        <link refid="runtime_2main_8cpp"/>
      </node>
      <node id="2125">
        <label>src/runtime/qcircuit_exporter.hpp</label>
        <link refid="qcircuit__exporter_8hpp"/>
        <childnode refid="2124" relation="include">
        </childnode>
      </node>
      <node id="2123">
        <label>src/runtime/compiler.hpp</label>
        <link refid="compiler.hpp"/>
        <childnode refid="2124" relation="include">
        </childnode>
        <childnode refid="2125" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classprogram" prot="public">program</innerclass>
    <innerclass refid="classparseexception" prot="public">parseexception</innerclass>
    <innerclass refid="classcompiler" prot="public">compiler</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="compiler_8hpp_1af29ea58956d1e519877cf79d81d5f8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
        <definition>qasm::exec::executable* convert_import</definition>
        <argsstring>(parser::parsetree &amp;ref)</argsstring>
        <name>convert_import</name>
        <param>
          <type><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert parse tree to import executable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="420" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a3a9fc818a308f225f17b30cf26a3f674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
        <definition>qasm::exec::executable* convert_anchor</definition>
        <argsstring>(parser::parsetree &amp;ref)</argsstring>
        <name>convert_anchor</name>
        <param>
          <type><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert parse tree to anchor executable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="427" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="427" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1af4b1195ebe9533956bca833f365dccfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
        <definition>qasm::exec::executable* convert_print</definition>
        <argsstring>(parser::parsetree &amp;ref)</argsstring>
        <name>convert_print</name>
        <param>
          <type><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert parse tree to pint executable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="434" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1aef48a14daa35b8b1ac149d4507745272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
        <definition>qasm::exec::executable* convert_gate_application</definition>
        <argsstring>(parser::parsetree &amp;ref)</argsstring>
        <name>convert_gate_application</name>
        <param>
          <type><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert parse tree to gate executable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="441" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="441" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a3fadce05c7730406d98ffa5c57beee3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
        <definition>qasm::exec::executable* convert_typedef</definition>
        <argsstring>(parser::parsetree &amp;ref)</argsstring>
        <name>convert_typedef</name>
        <param>
          <type><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert parse tree to declaration executable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="478" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="478" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a68fba8c9d7b383e00bd8786cb4581374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
        <definition>qasm::exec::executable* convert_measurement</definition>
        <argsstring>(parser::parsetree &amp;ref)</argsstring>
        <name>convert_measurement</name>
        <param>
          <type><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert parse tree to measurement executable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="493" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="493" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a9695552da709ab00ce93ec00fa71447b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
        <definition>qasm::exec::executable* convert_reset</definition>
        <argsstring>(parser::parsetree &amp;ref)</argsstring>
        <name>convert_reset</name>
        <param>
          <type><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert parse tree to pint executable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="515" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="515" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a859ddd4d6a4adc68346506c50a08f063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void post_none</definition>
        <argsstring>(compiler &amp;comp, qasm::exec::executable *runable)</argsstring>
        <name>post_none</name>
        <param>
          <type><ref refid="classcompiler" kindref="compound">compiler</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
          <declname>runable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discard converted value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="539" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="539" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a01ae4a79dc45ca04bac94915f97db422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void post_add</definition>
        <argsstring>(compiler &amp;comp, qasm::exec::executable *runable)</argsstring>
        <name>post_add</name>
        <param>
          <type><ref refid="classcompiler" kindref="compound">compiler</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
          <declname>runable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add converted value to program to execute </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="545" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="545" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a5f86ad821427272c82f91807bed4ffe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void post_import</definition>
        <argsstring>(compiler &amp;comp, qasm::exec::executable *runable)</argsstring>
        <name>post_import</name>
        <param>
          <type><ref refid="classcompiler" kindref="compound">compiler</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
          <declname>runable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load another file into the program </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="551" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="551" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="compiler_8hpp_1a6a17a035bad361ab796fcc69b5e57431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void post_anchor</definition>
        <argsstring>(compiler &amp;comp, qasm::exec::executable *runable)</argsstring>
        <name>post_anchor</name>
        <param>
          <type><ref refid="classcompiler" kindref="compound">compiler</ref> &amp;</type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref> *</type>
          <declname>runable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a jump anchor to the program </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/compiler.hpp" line="560" column="1" bodyfile="src/runtime/compiler.hpp" bodystart="560" bodyend="564"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_QASM_COMPILER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_QASM_COMPILER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lexer_8hpp" kindref="compound">./lexer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parser_8hpp" kindref="compound">./parser.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="runtime_8hpp" kindref="compound">./runtime.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scanner_8hpp" kindref="compound">./scanner.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelexical" kindref="compound">lexical</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceparser" kindref="compound">parser</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//Header<sp/>back-references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//class<sp/>program;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//bool<sp/>try_parse_qasm(program&amp;<sp/>prog,<sp/>std::string<sp/>file_name,<sp/>lexical::lexer&amp;<sp/>tokenizer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classprogram" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classprogram" kindref="compound">program</ref><sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34" refid="classprogram_1a827f0b22e21be3ce1e0e568a147488b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;qasm::exec::executable*&gt;<sp/><ref refid="classprogram_1a827f0b22e21be3ce1e0e568a147488b9" kindref="member">lines</ref>;</highlight></codeline>
<codeline lineno="38" refid="classprogram_1ae17b7e99958aa0770b1cc4a8c20acbfe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>ulong&gt;<sp/><ref refid="classprogram_1ae17b7e99958aa0770b1cc4a8c20acbfe" kindref="member">anchors</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classprogram_1a0772f916267bdb0eb4d803ea472e8e74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classprogram_1a0772f916267bdb0eb4d803ea472e8e74" kindref="member">program</ref>(){}</highlight></codeline>
<codeline lineno="41" refid="classprogram_1a31e130840978c25ba94a6ff2b192011c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classprogram_1a31e130840978c25ba94a6ff2b192011c" kindref="member">~program</ref>(){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;qasm::exec::executable*&gt;::iterator<sp/>it<sp/>=<sp/>lines.begin();<sp/>it<sp/>!=<sp/>lines.end();<sp/>it++){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(*it);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classprogram_1ada37ef3924e109909695ef9bd55f54b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classprogram_1ada37ef3924e109909695ef9bd55f54b3" kindref="member">push</ref>(<ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="classptr" kindref="compound">ptr</ref>){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines.push_back(ptr);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classprogram_1a40b1420af44c92684d8ecc035f8d004c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classprogram_1a40b1420af44c92684d8ecc035f8d004c" kindref="member">push</ref>(std::vector&lt;qasm::exec::executable*&gt;<sp/>lines){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;qasm::exec::executable*&gt;::iterator<sp/>it<sp/>=<sp/>lines.begin();<sp/>it<sp/>!=<sp/>lines.end();<sp/>it++){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push(*it);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classparseexception" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparseexception" kindref="compound">parseexception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72" refid="classparseexception_1a4807889c64609ea29a275c9f66c15e61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classparseexception_1a4807889c64609ea29a275c9f66c15e61" kindref="member">what_message</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78" refid="classparseexception_1a0e50402f7511e71332099355061b26ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types_8h_1ab2bb0e5480d1d957383df6b350794313" kindref="member">ulong</ref><sp/><ref refid="classparseexception_1a0e50402f7511e71332099355061b26ca" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="82" refid="classparseexception_1a671840c0e1441210c84084e235fa55c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types_8h_1ab2bb0e5480d1d957383df6b350794313" kindref="member">ulong</ref><sp/><ref refid="classparseexception_1a671840c0e1441210c84084e235fa55c8" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="86" refid="classparseexception_1a99a096bfed3e48cd365cdae1952bc017" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classparseexception_1a99a096bfed3e48cd365cdae1952bc017" kindref="member">file</ref>;</highlight></codeline>
<codeline lineno="90" refid="classparseexception_1a5f02ff7145f65ba4e9b5be994bfc0edb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classparseexception_1a5f02ff7145f65ba4e9b5be994bfc0edb" kindref="member">msg</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classparseexception_1a16accd5bc62f4465b611b38db6751e0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparseexception_1a16accd5bc62f4465b611b38db6751e0e" kindref="member">parseexception</ref>(<ref refid="types_8h_1ab2bb0e5480d1d957383df6b350794313" kindref="member">ulong</ref><sp/>row,<sp/><ref refid="types_8h_1ab2bb0e5480d1d957383df6b350794313" kindref="member">ulong</ref><sp/>column,<sp/>std::string<sp/>file,<sp/>std::string<sp/>message)<sp/>:<sp/>r(row),<sp/>c(column),<sp/>file(file),<sp/>msg(message){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>sb;<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb<sp/>&lt;&lt;<sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>c<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>what_message<sp/>=<sp/>sb.str();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classparseexception_1a006c6421028f780b91eb4a473265dce7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classparseexception_1a006c6421028f780b91eb4a473265dce7" kindref="member">what</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>what_message.c_str();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="104"><highlight class="comment">namespace<sp/>qasm<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="comment">namespace<sp/>rules<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_subcircuit_application(program&amp;<sp/>prog,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>&lt;<sp/>1){</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;){</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qasm::exec::apply_subcircuit<sp/>apply(tokens[0].content[0]);</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>tokens.size();<sp/>i++){</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((tokens[i].lexemeptr)-&gt;name<sp/>!=<sp/>&quot;Reference&quot;){</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apply.params.push_back(tokens[i].content[0]);</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog.push(new<sp/>qasm::exec::apply_subcircuit(apply));</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_gate_application(program&amp;<sp/>prog,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>&lt;<sp/>2){</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;){</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qasm::exec::apply_gate<sp/>apply(tokens[0].content[0]);</highlight></codeline>
<codeline lineno="140"><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>tokens.size();<sp/>i++){</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((tokens[i].lexemeptr)-&gt;name<sp/>!=<sp/>&quot;Indexor&quot;){</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apply.param_names.push_back(tokens[i].content[1]);</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apply.param_indecies.push_back(std::stol(tokens[i].content[2]));</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog.push(new<sp/>qasm::exec::apply_gate(apply));</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_debug(program&amp;<sp/>prog,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>&lt;<sp/>2){</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Print&quot;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[1].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog.push(new<sp/>qasm::exec::print(tokens[1].content[0]));</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_measurement(program&amp;<sp/>prog,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>&lt;<sp/>4){</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Measure&quot;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[1].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Indexor&quot;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[2].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Map&quot;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[3].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Indexor&quot;</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog.push(new<sp/>qasm::exec::measurement(</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens[1].content[1],<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stol(tokens[1].content[2]),<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens[3].content[1],<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stol(tokens[3].content[2])</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Measure&quot;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[1].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[2].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Map&quot;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[3].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog.push(new<sp/>qasm::exec::measurement(</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens[1].content[0],<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens[3].content[0]</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_declaration(program&amp;<sp/>prog,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>&lt;<sp/>5){</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[1].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[2].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Left<sp/>[&quot;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[3].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Integer&quot;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[4].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Right<sp/>]&quot;<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog.push(new<sp/>qasm::exec::declaration(</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens[0].content[0],<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens[1].content[0],<sp/></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stol(tokens[3].content[0])</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_label(program&amp;<sp/>prog,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>&lt;<sp/>2){</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Anchor&quot;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[1].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Reference&quot;</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog.anchors[tokens[1].content[0]]<sp/>=<sp/>prog.lines.size();</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_include(program&amp;<sp/>prog,<sp/>lexical::lexer&amp;<sp/>tokenizer,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>&lt;<sp/>2){</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[0].lexemeptr)-&gt;name<sp/>==<sp/>&quot;Include&quot;<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tokens[1].lexemeptr)-&gt;name<sp/>==<sp/>&quot;String&quot;</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::filesystem::path<sp/>path(tokens[1].content[0]);</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!try_parse_qasm(prog,<sp/>tokens[1].content[0],<sp/>tokenizer)){</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//throw<sp/>exception?</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>try_parse_rule(program&amp;<sp/>prog,<sp/>lexical::lexer&amp;<sp/>tokenizer,<sp/>std::vector&lt;lexical::match&gt;&amp;<sp/>tokens){</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(try_parse_include(prog,<sp/>tokenizer,<sp/>tokens)){</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(try_parse_label(prog,<sp/>tokens)){</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(try_parse_declaration(prog,<sp/>tokens)){</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(try_parse_measurement(prog,<sp/>tokens)){</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(try_parse_debug(prog,<sp/>tokens)){</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(try_parse_gate_application(prog,<sp/>tokens)){</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(try_parse_subcircuit_application(prog,<sp/>tokens)){</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment">}</highlight></codeline>
<codeline lineno="304"><highlight class="comment">}</highlight></codeline>
<codeline lineno="305"><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment">bool<sp/>try_parse_qasm(program&amp;<sp/>prog,<sp/>std::string<sp/>file_name,<sp/>lexical::lexer&amp;<sp/>tokenizer){</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file(file_name);</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/>ulong<sp/>file_line<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="313"><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/>while(std::getline(file,<sp/>line)){</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try{</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;lexical::match&gt;<sp/>tokens<sp/>=<sp/>tokenizer.tokenize(file_name,<sp/>line.begin(),<sp/>line.end());<sp/></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(tokens.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_line++;</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(qasm::rules::try_parse_rule(prog,<sp/>tokenizer,<sp/>tokens)){</highlight></codeline>
<codeline lineno="323"><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>parseexception(file_line,<sp/>0,<sp/>file_name,<sp/>&quot;Line<sp/>doesn&apos;t<sp/>match<sp/>any<sp/>valid<sp/>statement<sp/>types&quot;);</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_line++;</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}catch(lexical::lexicalexception&amp;<sp/>ex){</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>lexical::lexicalexception(file_line,<sp/>ex.c,<sp/>ex.file,<sp/>ex.msg);</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;<sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="comment">}</highlight></codeline>
<codeline lineno="335"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiler<sp/>class<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="348" refid="classcompiler" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcompiler" kindref="compound">compiler</ref><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="350" refid="classcompiler_1a888ac16dbb82fa8a9500633addcd22ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlexical_1_1lexer" kindref="compound">lexical::lexer</ref>&amp;<sp/><ref refid="classcompiler_1a888ac16dbb82fa8a9500633addcd22ba" kindref="member">tokenizer</ref>;</highlight></codeline>
<codeline lineno="351" refid="classcompiler_1a1b712963929882f359df919ce73bbf4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;parser::ruleptr&gt;&amp;<sp/><ref refid="classcompiler_1a1b712963929882f359df919ce73bbf4e" kindref="member">rules</ref>;<sp/></highlight></codeline>
<codeline lineno="352" refid="classcompiler_1a76cbb22ce5238f2fd9b3946f541dba0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;qasm::exec::executable*<sp/>(*)(parser::parsetree&amp;)&gt;&amp;<sp/><ref refid="classcompiler_1a76cbb22ce5238f2fd9b3946f541dba0c" kindref="member">converters</ref>;</highlight></codeline>
<codeline lineno="353" refid="classcompiler_1aa9d1b362adff0ca48511cf824ca1fe4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;void(*)(compiler&amp;,<sp/>qasm::exec::executable*)&gt;&amp;<sp/><ref refid="classcompiler_1aa9d1b362adff0ca48511cf824ca1fe4c" kindref="member">events</ref>;</highlight></codeline>
<codeline lineno="354" refid="classcompiler_1a801700690bf711169679cb6ca890168a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classprogram" kindref="compound">program</ref>&amp;<sp/><ref refid="classcompiler_1a801700690bf711169679cb6ca890168a" kindref="member">prog</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="classcompiler_1aac603e3e8c3851dfb420e6e007adbad0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcompiler_1aac603e3e8c3851dfb420e6e007adbad0" kindref="member">compiler</ref>(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlexical_1_1lexer" kindref="compound">lexical::lexer</ref>&amp;<sp/>tokenizer,<sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;parser::ruleptr&gt;&amp;<sp/>rules,<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;<ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/>(*)(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;)&gt;&amp;<sp/>converters,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*)(<ref refid="classcompiler" kindref="compound">compiler</ref>&amp;,<sp/><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*)&gt;&amp;<sp/>events,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classprogram" kindref="compound">program</ref>&amp;<sp/>prog</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):<sp/>tokenizer(tokenizer),<sp/>rules(rules),<sp/>converters(converters),<sp/>events(events),<sp/>prog(prog)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="classcompiler_1a9b61ba6cc57763a9e76feb44fffd1616" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcompiler_1a9b61ba6cc57763a9e76feb44fffd1616" kindref="member">try_parse_line</ref>(std::string<sp/>filename,<sp/><ref refid="types_8h_1ab2bb0e5480d1d957383df6b350794313" kindref="member">ulong</ref><sp/>lineNumber,<sp/>std::string<sp/>line){</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Tokenize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;match&gt;<sp/>tokens<sp/>=<sp/>tokenizer.<ref refid="classlexical_1_1lexer_1a89f9fd380037709ace9c8fe7604b5460" kindref="member">tokenize</ref>(filename,<sp/>line.begin(),<sp/>line.end());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Skip<sp/>empty<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tokens.size()<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ismatch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>over<sp/>all<sp/>rules<sp/>determining<sp/>if<sp/>the<sp/>tokens<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;parser::ruleptr&gt;::iterator<sp/>it<sp/>=<sp/>rules.begin();<sp/>it<sp/>!=<sp/>rules.end();<sp/>it++){</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref><sp/>pt;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1tokenqueue" kindref="compound">parser::tokenqueue</ref><sp/>q(tokens);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*it)-&gt;tryParse(q,<sp/>&amp;pt)){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ismatch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>post<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&lt;<sp/>converters.size()){</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="classptr" kindref="compound">ptr</ref><sp/>=<sp/>converters[index](pt);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&lt;<sp/>events.size()){</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events[index](*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>ptr);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ismatch<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classparseexception" kindref="compound">parseexception</ref>(lineNumber,<sp/>0,<sp/>filename,<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>statement&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="classlexical_1_1lexicalexception" kindref="compound">lexical::lexicalexception</ref>&amp;<sp/>ex){</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classlexical_1_1lexicalexception" kindref="compound">lexical::lexicalexception</ref>(lineNumber,<sp/>ex.<ref refid="classlexical_1_1lexicalexception_1a7d7aeb97fa40e634950b28a3d48a9b51" kindref="member">c</ref>,<sp/>ex.<ref refid="classlexical_1_1lexicalexception_1a19c8e9b165ad5d2250d2a26c920462e3" kindref="member">file</ref>,<sp/>ex.<ref refid="classlexical_1_1lexicalexception_1aca4560509cfad8e43c42def571bba550" kindref="member">msg</ref>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="classcompiler_1af3984a0a53279c28bee8aee4b0ef84ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcompiler_1af3984a0a53279c28bee8aee4b0ef84ca" kindref="member">try_parse_file</ref>(std::string<sp/>filename){</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classscanner" kindref="compound">scanner</ref><sp/>s(filename);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>over<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(s.<ref refid="classscanner_1ae0216bb31141042c9459f6d91cd18e91" kindref="member">next</ref>(line)){</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try_parse_line(filename,<sp/>s.<ref refid="classscanner_1ada10515d2de6c37656a4e07d7257eaba" kindref="member">getLineNumber</ref>()<sp/>-<sp/>1,<sp/>line);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal">};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="420" refid="compiler_8hpp_1af29ea58956d1e519877cf79d81d5f8b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="compiler_8hpp_1af29ea58956d1e519877cf79d81d5f8b8" kindref="member">convert_import</ref><sp/>(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;<sp/>ref){</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1import" kindref="compound">qasm::exec::import</ref>*<sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1import" kindref="compound">qasm::exec::import</ref>(ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0]);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427" refid="compiler_8hpp_1a3a9fc818a308f225f17b30cf26a3f674" refkind="member"><highlight class="normal"><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="compiler_8hpp_1a3a9fc818a308f225f17b30cf26a3f674" kindref="member">convert_anchor</ref><sp/>(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;<sp/>ref){</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1label" kindref="compound">qasm::exec::label</ref>*<sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1label" kindref="compound">qasm::exec::label</ref>(ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0]);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434" refid="compiler_8hpp_1af4b1195ebe9533956bca833f365dccfb" refkind="member"><highlight class="normal"><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="compiler_8hpp_1af4b1195ebe9533956bca833f365dccfb" kindref="member">convert_print</ref><sp/>(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;<sp/>ref){</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1print" kindref="compound">qasm::exec::print</ref>*<sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="properties_8h_1a0852287be3866e6ca5f85e48fca56dfe" kindref="member">qasm::exec::print</ref>(ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0]);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441" refid="compiler_8hpp_1aef48a14daa35b8b1ac149d4507745272" refkind="member"><highlight class="normal"><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="compiler_8hpp_1aef48a14daa35b8b1ac149d4507745272" kindref="member">convert_gate_application</ref><sp/>(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;<sp/>ref){</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>params;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;u64&gt;<sp/>indecies;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Far<sp/>left<sp/>leaf<sp/>is<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Remainder<sp/>are<sp/>indexors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>stack&lt;parser::parsetree*&gt;<sp/>list;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>list.push(&amp;ref);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!list.empty()){</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>*<sp/>node<sp/>=<sp/>list.top();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.pop();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node-&gt;<ref refid="structparser_1_1parsetree_1a2e876beca6bc762fa2ecb849f681f311" kindref="member">isBranch</ref>()){</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>node-&gt;<ref refid="structparser_1_1parsetree_1a791b5113d65303aa8d272b0eb749cb54" kindref="member">size</ref>();<sp/>t++){</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.push(&amp;(node-&gt;<ref refid="structparser_1_1parsetree_1af238368fcc40aea999cab62ba7d74fda" kindref="member">getChild</ref>(t)));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node-&gt;<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a346ef13017b47ee41a6abe643e5732e1" kindref="member">lexemeptr</ref>-&gt;<ref refid="classlexical_1_1lexeme_1a43f46025bbc59bdaff06d4e4efc979c1" kindref="member">name</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reference&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>node-&gt;<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(node-&gt;<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a346ef13017b47ee41a6abe643e5732e1" kindref="member">lexemeptr</ref>-&gt;<ref refid="classlexical_1_1lexeme_1a43f46025bbc59bdaff06d4e4efc979c1" kindref="member">name</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Indexor&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params.push_back(node-&gt;<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[1]);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indecies.push_back(std::stol(node-&gt;<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[2]));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse(params.begin(),<sp/>params.end());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse(indecies.begin(),<sp/>indecies.end());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1apply__gate" kindref="compound">qasm::exec::apply_gate</ref>*<sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1apply__gate" kindref="compound">qasm::exec::apply_gate</ref>(name);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>rule-&gt;param_names<sp/>=<sp/>params;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>rule-&gt;param_indecies<sp/>=<sp/>indecies;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478" refid="compiler_8hpp_1a3fadce05c7730406d98ffa5c57beee3a" refkind="member"><highlight class="normal"><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="compiler_8hpp_1a3fadce05c7730406d98ffa5c57beee3a" kindref="member">convert_typedef</ref><sp/>(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;<sp/>ref){</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>u64<sp/>size;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>std::stol(ref.<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0]);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1declaration" kindref="compound">qasm::exec::declaration</ref>*<sp/><ref refid="classptr" kindref="compound">ptr</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1declaration" kindref="compound">qasm::exec::declaration</ref>(type,<sp/>name,<sp/>size);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493" refid="compiler_8hpp_1a68fba8c9d7b383e00bd8786cb4581374" refkind="member"><highlight class="normal"><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="compiler_8hpp_1a68fba8c9d7b383e00bd8786cb4581374" kindref="member">convert_measurement</ref><sp/>(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;<sp/>ref){</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//two<sp/>ways<sp/>to<sp/>measure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a346ef13017b47ee41a6abe643e5732e1" kindref="member">lexemeptr</ref>-&gt;<ref refid="classlexical_1_1lexeme_1a43f46025bbc59bdaff06d4e4efc979c1" kindref="member">name</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Reference&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>first<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>second<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1measurement" kindref="compound">qasm::exec::measurement</ref>(first,<sp/>second);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a346ef13017b47ee41a6abe643e5732e1" kindref="member">lexemeptr</ref>-&gt;<ref refid="classlexical_1_1lexeme_1a43f46025bbc59bdaff06d4e4efc979c1" kindref="member">name</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Indexor&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>first<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[1];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>fi<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[2];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>second<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[1];</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>si<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[2];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1measurement" kindref="compound">qasm::exec::measurement</ref>(first,<sp/>std::stol(fi),<sp/>second,<sp/>std::stol(si));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classparseexception" kindref="compound">parseexception</ref>(-1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Nan&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Measurement<sp/>invalid<sp/>despite<sp/>passing<sp/>syntax<sp/>check&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="compiler_8hpp_1a9695552da709ab00ce93ec00fa71447b" refkind="member"><highlight class="normal"><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/><ref refid="compiler_8hpp_1a9695552da709ab00ce93ec00fa71447b" kindref="member">convert_reset</ref><sp/>(<ref refid="structparser_1_1parsetree" kindref="compound">parser::parsetree</ref>&amp;<sp/>ref){</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a346ef13017b47ee41a6abe643e5732e1" kindref="member">lexemeptr</ref>-&gt;<ref refid="classlexical_1_1lexeme_1a43f46025bbc59bdaff06d4e4efc979c1" kindref="member">name</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Indexor&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[1];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[2];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1reset" kindref="compound">qasm::exec::reset</ref>*<sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1reset" kindref="compound">qasm::exec::reset</ref>(name,<sp/>type,<sp/>std::stol(index));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>().<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>ref.<ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>().<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1reset" kindref="compound">qasm::exec::reset</ref>*<sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classqasm_1_1exec_1_1reset" kindref="compound">qasm::exec::reset</ref>(name,<sp/>type);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Post<sp/>conversion<sp/>hooks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="539" refid="compiler_8hpp_1a859ddd4d6a4adc68346506c50a08f063" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compiler_8hpp_1a859ddd4d6a4adc68346506c50a08f063" kindref="member">post_none</ref><sp/>(<ref refid="classcompiler" kindref="compound">compiler</ref>&amp;<sp/>comp,<sp/><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/>runable){</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>runable;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545" refid="compiler_8hpp_1a01ae4a79dc45ca04bac94915f97db422" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compiler_8hpp_1a01ae4a79dc45ca04bac94915f97db422" kindref="member">post_add</ref><sp/>(<ref refid="classcompiler" kindref="compound">compiler</ref>&amp;<sp/>comp,<sp/><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/>runable){</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>comp.<ref refid="classcompiler_1a801700690bf711169679cb6ca890168a" kindref="member">prog</ref>.<ref refid="classprogram_1ada37ef3924e109909695ef9bd55f54b3" kindref="member">push</ref>(runable);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551" refid="compiler_8hpp_1a5f86ad821427272c82f91807bed4ffe0" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compiler_8hpp_1a5f86ad821427272c82f91807bed4ffe0" kindref="member">post_import</ref><sp/>(<ref refid="classcompiler" kindref="compound">compiler</ref>&amp;<sp/>comp,<sp/><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/>runable){</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1import" kindref="compound">qasm::exec::import</ref>*<sp/><ref refid="classptr" kindref="compound">ptr</ref><sp/>=<sp/>(<ref refid="classqasm_1_1exec_1_1import" kindref="compound">qasm::exec::import</ref>*)runable;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>file<sp/>=<sp/>ptr-&gt;<ref refid="classqasm_1_1exec_1_1import_1a421f281a62fa921c13a3fc86d6c6fa17" kindref="member">filename</ref>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>comp.<ref refid="classcompiler_1af3984a0a53279c28bee8aee4b0ef84ca" kindref="member">try_parse_file</ref>(file);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>runable;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560" refid="compiler_8hpp_1a6a17a035bad361ab796fcc69b5e57431" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compiler_8hpp_1a6a17a035bad361ab796fcc69b5e57431" kindref="member">post_anchor</ref><sp/>(<ref refid="classcompiler" kindref="compound">compiler</ref>&amp;<sp/>comp,<sp/><ref refid="classqasm_1_1exec_1_1executable" kindref="compound">qasm::exec::executable</ref>*<sp/>runable){</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqasm_1_1exec_1_1label" kindref="compound">qasm::exec::label</ref>*<sp/><ref refid="classptr" kindref="compound">ptr</ref><sp/>=<sp/>(<ref refid="classqasm_1_1exec_1_1label" kindref="compound">qasm::exec::label</ref>*)runable;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>comp.<ref refid="classcompiler_1a801700690bf711169679cb6ca890168a" kindref="member">prog</ref>.<ref refid="classprogram_1ae17b7e99958aa0770b1cc4a8c20acbfe" kindref="member">anchors</ref>[ptr-&gt;<ref refid="classqasm_1_1exec_1_1label_1ae88393dae0bd5ddbe32a65cfb2d8f247" kindref="member">name</ref>]<sp/>=<sp/>comp.<ref refid="classcompiler_1a801700690bf711169679cb6ca890168a" kindref="member">prog</ref>.<ref refid="classprogram_1a827f0b22e21be3ce1e0e568a147488b9" kindref="member">lines</ref>.size();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>runable;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/runtime/compiler.hpp"/>
  </compounddef>
</doxygen>
