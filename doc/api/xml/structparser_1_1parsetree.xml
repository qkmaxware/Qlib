<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structparser_1_1parsetree" kind="struct" language="C++" prot="public">
    <compoundname>parser::parsetree</compoundname>
    <includes refid="parser_8hpp" local="no">parser.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" prot="public" static="no" mutable="no">
        <type><ref refid="structlexical_1_1match" kindref="compound">match</ref></type>
        <definition>match parser::parsetree::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lexical match associated with this node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="151" column="1" bodyfile="src/runtime/parser.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref> &gt;</type>
        <definition>vector&lt;parsetree&gt; parser::parsetree::children</definition>
        <argsstring></argsstring>
        <name>children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Children of this node (usually 2) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="155" column="1" bodyfile="src/runtime/parser.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structparser_1_1parsetree_1a8ba2bf7b05dd8e858edf2fab9f3d0165" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser::parsetree::isLeaf</definition>
        <argsstring>()</argsstring>
        <name>isLeaf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if node has no children </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="159" column="1" bodyfile="src/runtime/parser.hpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structparser_1_1parsetree_1a2e876beca6bc762fa2ecb849f681f311" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser::parsetree::isBranch</definition>
        <argsstring>()</argsstring>
        <name>isBranch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if node has children </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="165" column="1" bodyfile="src/runtime/parser.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structparser_1_1parsetree_1a460a38e7e9a33cafe00c7f7b2163f75a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parser::parsetree::isBinary</definition>
        <argsstring>()</argsstring>
        <name>isBinary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if the parse tree node is binary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="171" column="1" bodyfile="src/runtime/parser.hpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref> &amp;</type>
        <definition>parsetree&amp; parser::parsetree::getLeft</definition>
        <argsstring>()</argsstring>
        <name>getLeft</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If tree is binary, get the left hand child (index 0) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="177" column="1" bodyfile="src/runtime/parser.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref> &amp;</type>
        <definition>parsetree&amp; parser::parsetree::getRight</definition>
        <argsstring>()</argsstring>
        <name>getRight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If tree is binary, get the right hand child (index 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="183" column="1" bodyfile="src/runtime/parser.hpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="structparser_1_1parsetree_1a791b5113d65303aa8d272b0eb749cb54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t parser::parsetree::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of children elements </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="189" column="1" bodyfile="src/runtime/parser.hpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="structparser_1_1parsetree_1af238368fcc40aea999cab62ba7d74fda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref> &amp;</type>
        <definition>parsetree&amp; parser::parsetree::getChild</definition>
        <argsstring>(size_t i)</argsstring>
        <name>getChild</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a specific child element </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="195" column="1" bodyfile="src/runtime/parser.hpp" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structparser_1_1parsetree_1ada59e97da6280e95cf96cbb8f85df364" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void parser::parsetree::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print tree to standard out, usefull in debugging </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="201" column="1" bodyfile="src/runtime/parser.hpp" bodystart="201" bodyend="217"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class representing a single node in an abstract tree structure </para>    </detaileddescription>
    <collaborationgraph>
      <node id="456">
        <label>parser::parsetree</label>
        <link refid="structparser_1_1parsetree"/>
        <childnode refid="457" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="457">
        <label>lexical::match</label>
        <link refid="structlexical_1_1match"/>
        <childnode refid="458" relation="usage">
          <edgelabel>lexemeptr</edgelabel>
        </childnode>
      </node>
      <node id="458">
        <label>lexical::lexeme</label>
        <link refid="classlexical_1_1lexeme"/>
      </node>
    </collaborationgraph>
    <location file="src/runtime/parser.hpp" line="147" column="1" bodyfile="src/runtime/parser.hpp" bodystart="147" bodyend="218"/>
    <listofallmembers>
      <member refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>children</name></member>
      <member refid="structparser_1_1parsetree_1af238368fcc40aea999cab62ba7d74fda" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>getChild</name></member>
      <member refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>getLeft</name></member>
      <member refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>getRight</name></member>
      <member refid="structparser_1_1parsetree_1a460a38e7e9a33cafe00c7f7b2163f75a" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>isBinary</name></member>
      <member refid="structparser_1_1parsetree_1a2e876beca6bc762fa2ecb849f681f311" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>isBranch</name></member>
      <member refid="structparser_1_1parsetree_1a8ba2bf7b05dd8e858edf2fab9f3d0165" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>isLeaf</name></member>
      <member refid="structparser_1_1parsetree_1ada59e97da6280e95cf96cbb8f85df364" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>print</name></member>
      <member refid="structparser_1_1parsetree_1a791b5113d65303aa8d272b0eb749cb54" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>size</name></member>
      <member refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" prot="public" virt="non-virtual"><scope>parser::parsetree</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
