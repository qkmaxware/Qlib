<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="parser_8hpp" kind="file" language="C++">
    <compoundname>parser.hpp</compoundname>
    <includes refid="lexer_8hpp" local="yes">./lexer.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includedby refid="compiler_8hpp" local="yes">src/runtime/compiler.hpp</includedby>
    <includedby refid="runtime_2main_8cpp" local="yes">src/runtime/main.cpp</includedby>
    <incdepgraph>
      <node id="1825">
        <label>regex</label>
      </node>
      <node id="1827">
        <label>exception</label>
      </node>
      <node id="1822">
        <label>src/runtime/parser.hpp</label>
        <link refid="parser.hpp"/>
        <childnode refid="1823" relation="include">
        </childnode>
        <childnode refid="1829" relation="include">
        </childnode>
        <childnode refid="1824" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
      </node>
      <node id="1826">
        <label>vector</label>
      </node>
      <node id="1828">
        <label>sstream</label>
      </node>
      <node id="1824">
        <label>iostream</label>
      </node>
      <node id="1823">
        <label>./lexer.hpp</label>
        <link refid="lexer_8hpp"/>
        <childnode refid="1824" relation="include">
        </childnode>
        <childnode refid="1825" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1827" relation="include">
        </childnode>
        <childnode refid="1828" relation="include">
        </childnode>
      </node>
      <node id="1829">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1832">
        <label>src/runtime/main.cpp</label>
        <link refid="runtime_2main_8cpp"/>
      </node>
      <node id="1830">
        <label>src/runtime/parser.hpp</label>
        <link refid="parser.hpp"/>
        <childnode refid="1831" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
      </node>
      <node id="1831">
        <label>src/runtime/compiler.hpp</label>
        <link refid="compiler_8hpp"/>
        <childnode refid="1832" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classparser_1_1repeat" prot="public">parser::repeat</innerclass>
    <innerclass refid="classparser_1_1tokenqueue" prot="public">parser::tokenqueue</innerclass>
    <innerclass refid="structparser_1_1parsetree" prot="public">parser::parsetree</innerclass>
    <innerclass refid="classparser_1_1rule" prot="public">parser::rule</innerclass>
    <innerclass refid="classparser_1_1repeater" prot="public">parser::repeater</innerclass>
    <innerclass refid="classparser_1_1terminal" prot="public">parser::terminal</innerclass>
    <innerclass refid="classparser_1_1sequence" prot="public">parser::sequence</innerclass>
    <innerclass refid="classparser_1_1choice" prot="public">parser::choice</innerclass>
    <innernamespace refid="namespaceparser">parser</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="parser_8hpp_1a722923e496599a4427f533b0c347e3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator*</definition>
        <argsstring>(parser::ruleptr right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat a rule </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="354" column="1" bodyfile="src/runtime/parser.hpp" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a971b8d5e9b8114ff9b5940fad5fc98f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator+</definition>
        <argsstring>(parser::ruleptr right)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat a rule </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="361" column="1" bodyfile="src/runtime/parser.hpp" bodystart="361" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a3613c7c9db8f7e35060e86555ed82006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator!</definition>
        <argsstring>(parser::ruleptr right)</argsstring>
        <name>operator!</name>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Repeat a rule </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="368" column="1" bodyfile="src/runtime/parser.hpp" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a010182413c1f69e351a507067f73e307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator*</definition>
        <argsstring>(lexeme &amp;right)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create terminal rule and repeat it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="375" column="1" bodyfile="src/runtime/parser.hpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a0150c00791055dedf9b8ea4335a00151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator+</definition>
        <argsstring>(lexeme &amp;right)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create terminal rule and repeat it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="383" column="1" bodyfile="src/runtime/parser.hpp" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a032b3d4cc0c96c7b43edf8290128bbb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator!</definition>
        <argsstring>(lexeme &amp;right)</argsstring>
        <name>operator!</name>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create terminal rule and repeat it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="391" column="1" bodyfile="src/runtime/parser.hpp" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a27dd049f5fefd3819dce94f81bcaea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator&lt;&lt;</definition>
        <argsstring>(parser::ruleptr left, parser::ruleptr right)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create sequence of rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="403" column="1" bodyfile="src/runtime/parser.hpp" bodystart="403" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a40a3cfa71695ff27939e79879070a7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator&lt;&lt;</definition>
        <argsstring>(parser::ruleptr left, lexeme &amp;right)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create terminal rule and then add it to a sequence of rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="410" column="1" bodyfile="src/runtime/parser.hpp" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a01e9bb412dfdf4084df429b5cb9ad25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator&lt;&lt;</definition>
        <argsstring>(lexeme &amp;left, parser::ruleptr right)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create terminal rule and then add it to a sequence of rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="418" column="1" bodyfile="src/runtime/parser.hpp" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1addcf969a66b1191560d0702cbfef8087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator&lt;&lt;</definition>
        <argsstring>(lexeme &amp;left, lexeme &amp;right)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create terminal rule and then add it to a sequence of rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="425" column="1" bodyfile="src/runtime/parser.hpp" bodystart="425" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a83ae991f5883e5298c5000de800d5c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator|</definition>
        <argsstring>(parser::ruleptr left, parser::ruleptr right)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a choice between 2 rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="433" column="1" bodyfile="src/runtime/parser.hpp" bodystart="433" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1a382e1d6e85a342495aa289d72f01873a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator|</definition>
        <argsstring>(parser::ruleptr left, lexeme &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a terminal rule and add it to a choice between 2 rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="440" column="1" bodyfile="src/runtime/parser.hpp" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1ac94f7bc23c74a7071b4a3c09fadac754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator|</definition>
        <argsstring>(lexeme &amp;left, parser::ruleptr right)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a terminal rule and add it to a choice between 2 rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="448" column="1" bodyfile="src/runtime/parser.hpp" bodystart="448" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="parser_8hpp_1ae0c60b97dec81fe6c23646c03d2f4223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref></type>
        <definition>parser::ruleptr operator|</definition>
        <argsstring>(lexeme &amp;left, lexeme &amp;right)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a terminal rule and add it to a choice between 2 rules </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/runtime/parser.hpp" line="455" column="1" bodyfile="src/runtime/parser.hpp" bodystart="455" bodyend="458"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_PARSING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PARSING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lexer_8hpp" kindref="compound">./lexer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelexical" kindref="compound">lexical</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="namespaceparser" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceparser" kindref="compound">parser</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classparser_1_1repeat" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23" refid="classparser_1_1repeat_1a4a52b46d6d8139c877b78454942c03fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat_1a4a52b46d6d8139c877b78454942c03fd" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="24" refid="classparser_1_1repeat_1a5d423398c46938e601f07ae95f119ea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat_1a5d423398c46938e601f07ae95f119ea7" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="25" refid="classparser_1_1repeat_1a997f9a57da38d6d3893212cf7129603e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat_1a997f9a57da38d6d3893212cf7129603e" kindref="member">hasMax</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28" refid="classparser_1_1repeat_1a5f4b0f9282d8683b57d999d9c9596155" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1repeat_1a5f4b0f9282d8683b57d999d9c9596155" kindref="member">repeat</ref>():<sp/>min(1),<sp/>max(1),<sp/>hasMax(true)<sp/>{}</highlight></codeline>
<codeline lineno="29" refid="classparser_1_1repeat_1a95498b83f117d845cb1a91aa22ff2067" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1repeat_1a95498b83f117d845cb1a91aa22ff2067" kindref="member">repeat</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min):<sp/>min(min),<sp/>max(0),<sp/>hasMax(false)<sp/>{}</highlight></codeline>
<codeline lineno="30" refid="classparser_1_1repeat_1a08e03f68f22e34134d347a62f2a62373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1repeat_1a08e03f68f22e34134d347a62f2a62373" kindref="member">repeat</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max)<sp/>:<sp/>min(min),<sp/>max(max),<sp/>hasMax(true)<sp/>{}</highlight></codeline>
<codeline lineno="31" refid="classparser_1_1repeat_1ac1320ff0936d3e4e14c9e67cdd6dc481" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1repeat_1ac1320ff0936d3e4e14c9e67cdd6dc481" kindref="member">repeat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref>&amp;<sp/>rep)<sp/>:<sp/>min(rep.min),<sp/>max(rep.max),<sp/>hasMax(rep.hasMax)<sp/>{}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="33" refid="classparser_1_1repeat_1a5034ec8bb7dd25a9c6f53a62875aace3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat_1a5034ec8bb7dd25a9c6f53a62875aace3" kindref="member">inRange</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;=<sp/>min<sp/>&amp;&amp;<sp/>(!hasMax<sp/>||<sp/>x<sp/>&lt;=<sp/>max);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="37" refid="classparser_1_1repeat_1a67c60e501c7e0fa33f2f3f1b99e44b62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat_1a67c60e501c7e0fa33f2f3f1b99e44b62" kindref="member">underMin</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>min;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="41" refid="classparser_1_1repeat_1ab52008340dc919bf7b81c50ba36f55e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat_1ab52008340dc919bf7b81c50ba36f55e7" kindref="member">overMax</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasMax<sp/>&amp;&amp;<sp/>x<sp/>&gt;<sp/>max;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="45" refid="classparser_1_1repeat_1a20153be6931a239d9aa32cf0adb948ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat_1a20153be6931a239d9aa32cf0adb948ac" kindref="member">hasRepetitionsRemaining</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>underMin(x)<sp/>||<sp/>inRange(x);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="namespaceparser_1ac46e69b1e6ac0db5fa1b987e69e0c64e" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref><sp/><ref refid="namespaceparser_1ac46e69b1e6ac0db5fa1b987e69e0c64e" kindref="member">KLEENE_STAR</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref>(0);</highlight></codeline>
<codeline lineno="57" refid="namespaceparser_1a97ed17cb3337d680cb84ca3f2af8c2dd" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref><sp/><ref refid="namespaceparser_1a97ed17cb3337d680cb84ca3f2af8c2dd" kindref="member">KLEENE_PLUS</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref>(1);</highlight></codeline>
<codeline lineno="61" refid="namespaceparser_1a1856f1b1a3996f6388d8686cf35daff9" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref><sp/><ref refid="namespaceparser_1a1856f1b1a3996f6388d8686cf35daff9" kindref="member">KLEENE_ONCE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref>(1,1);</highlight></codeline>
<codeline lineno="65" refid="namespaceparser_1ac97f2803cfa3a6e9328865ea4744d4d6" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref><sp/><ref refid="namespaceparser_1ac97f2803cfa3a6e9328865ea4744d4d6" kindref="member">KLEENE_OPTIONAL</ref><sp/>=<sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref>(0,1);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classparser_1_1tokenqueue" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparser_1_1tokenqueue" kindref="compound">tokenqueue</ref><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="75" refid="classparser_1_1tokenqueue_1af9c381cb6495ade00167f2242b6862c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;match&gt;<sp/><ref refid="classparser_1_1tokenqueue_1af9c381cb6495ade00167f2242b6862c5" kindref="member">tokens</ref>;</highlight></codeline>
<codeline lineno="79" refid="classparser_1_1tokenqueue_1a442939c8efd904678d30e863da8db52b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1tokenqueue_1a442939c8efd904678d30e863da8db52b" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84" refid="classparser_1_1tokenqueue_1a8727f483d2c016495487b7fe1aa9d2be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1tokenqueue_1a8727f483d2c016495487b7fe1aa9d2be" kindref="member">tokenqueue</ref>(vector&lt;match&gt;&amp;<sp/>toks)<sp/>:<sp/>tokens(toks),<sp/>index(0)<sp/>{}</highlight></codeline>
<codeline lineno="88" refid="classparser_1_1tokenqueue_1a19ed9dd34d5c205531e963241bbb4db5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1tokenqueue_1a19ed9dd34d5c205531e963241bbb4db5" kindref="member">length</ref>(){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tokens.size()<sp/>-<sp/>index;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94" refid="classparser_1_1tokenqueue_1a177e88ad8ccef06bb18777fe59fff7bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1tokenqueue_1a177e88ad8ccef06bb18777fe59fff7bd" kindref="member">hasNext</ref>(){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>&lt;<sp/>tokens.size();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100" refid="classparser_1_1tokenqueue_1a69326556cef2a89af0eb7310d2eb19d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1tokenqueue_1a69326556cef2a89af0eb7310d2eb19d3" kindref="member">getRestorePoint</ref>(){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106" refid="classparser_1_1tokenqueue_1a9e57fac92d33fe369a7ad6b87d63e7d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1tokenqueue_1a9e57fac92d33fe369a7ad6b87d63e7d5" kindref="member">reset</ref>(){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restore(0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112" refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" kindref="member">restore</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>restorePoint){</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>restorePoint;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118" refid="classparser_1_1tokenqueue_1a981f451b1248537433bdb5aaa0ca6368" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlexical_1_1match" kindref="compound">match</ref>&amp;<sp/><ref refid="classparser_1_1tokenqueue_1a981f451b1248537433bdb5aaa0ca6368" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tokens[ind];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124" refid="classparser_1_1tokenqueue_1afa7d5f0dcdce020660def60538c9f7eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlexical_1_1match" kindref="compound">match</ref>&amp;<sp/><ref refid="classparser_1_1tokenqueue_1afa7d5f0dcdce020660def60538c9f7eb" kindref="member">peek</ref>(){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tokens[index];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130" refid="classparser_1_1tokenqueue_1aa8c2fdc681835f88dfe43659d18b0922" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlexical_1_1match" kindref="compound">match</ref>&amp;<sp/><ref refid="classparser_1_1tokenqueue_1aa8c2fdc681835f88dfe43659d18b0922" kindref="member">pop</ref>(){</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tokens[index<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137" refid="classparser_1_1tokenqueue_1a75841d5aaa1b6eb3686481f61de07bbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1tokenqueue_1a75841d5aaa1b6eb3686481f61de07bbf" kindref="member">next</ref>(){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hasNext()){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="structparser_1_1parsetree" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>{</highlight></codeline>
<codeline lineno="151" refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlexical_1_1match" kindref="compound">match</ref><sp/><ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="155" refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;parsetree&gt;<sp/><ref refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" kindref="member">children</ref>;</highlight></codeline>
<codeline lineno="159" refid="structparser_1_1parsetree_1a8ba2bf7b05dd8e858edf2fab9f3d0165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structparser_1_1parsetree_1a8ba2bf7b05dd8e858edf2fab9f3d0165" kindref="member">isLeaf</ref>(){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children.size()<sp/>&lt;<sp/>1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165" refid="structparser_1_1parsetree_1a2e876beca6bc762fa2ecb849f681f311" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structparser_1_1parsetree_1a2e876beca6bc762fa2ecb849f681f311" kindref="member">isBranch</ref>(){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!isLeaf();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171" refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref>&amp;<sp/><ref refid="structparser_1_1parsetree_1a74fd9e1633a6581f3c07a6263a686bd3" kindref="member">getLeft</ref>(){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children[0];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177" refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref>&amp;<sp/><ref refid="structparser_1_1parsetree_1a3f158cea846ac57f787eb81a9ac2477f" kindref="member">getRight</ref>(){</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children[1];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183" refid="structparser_1_1parsetree_1ada59e97da6280e95cf96cbb8f85df364" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structparser_1_1parsetree_1ada59e97da6280e95cf96cbb8f85df364" kindref="member">print</ref>(){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isLeaf()){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;match:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value.<ref refid="structlexical_1_1match_1a2ebda7888d347b3de302ffc465755f07" kindref="member">content</ref>[0];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;parsetree&gt;::iterator<sp/>it<sp/>=<sp/>children.begin();<sp/>it<sp/>!=<sp/>children.end();<sp/>it++){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!first)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;print();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classparser_1_1rule" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="207" refid="classparser_1_1rule_1abbe02436a9cb7b38b2186a82ff12b29a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><ref refid="classparser_1_1rule_1abbe02436a9cb7b38b2186a82ff12b29a" kindref="member">~rule</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="212" refid="classparser_1_1rule_1a60ccfb91ea4fe7def5ec2a15bb97c5ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1rule_1a60ccfb91ea4fe7def5ec2a15bb97c5ec" kindref="member">tryParse</ref>(<ref refid="classparser_1_1tokenqueue" kindref="compound">tokenqueue</ref>&amp;<sp/>queue,<sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref>*<sp/>ref)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;rule&gt;<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">ruleptr</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classparser_1_1repeater" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparser_1_1repeater" kindref="compound">repeater</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="225" refid="classparser_1_1repeater_1a1969288aaeb1b6957586356bf2986194" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ruleptr<sp/><ref refid="classparser_1_1repeater_1a1969288aaeb1b6957586356bf2986194" kindref="member">rl</ref>;</highlight></codeline>
<codeline lineno="226" refid="classparser_1_1repeater_1ad76ca9d514283b1fa25e20d01b110104" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref><sp/><ref refid="classparser_1_1repeater_1ad76ca9d514283b1fa25e20d01b110104" kindref="member">rep</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="228" refid="classparser_1_1repeater_1aa5c267969cb13f7000e1767c2231f56c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1repeater_1aa5c267969cb13f7000e1767c2231f56c" kindref="member">repeater</ref>(ruleptr<sp/>r,<sp/><ref refid="classparser_1_1repeat" kindref="compound">repeat</ref><sp/>rep):<sp/>rl(r),rep(rep)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231" refid="classparser_1_1repeater_1a6f369d919c6f590156e3bb60259f1a45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1repeater_1a6f369d919c6f590156e3bb60259f1a45" kindref="member">~repeater</ref>(){</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234" refid="classparser_1_1repeater_1acb57c02da3e60b3ca751a2eda3e145c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeater_1acb57c02da3e60b3ca751a2eda3e145c2" kindref="member">tryParse</ref>(<ref refid="classparser_1_1tokenqueue" kindref="compound">tokenqueue</ref>&amp;<sp/>queue,<sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref>*<sp/>ref)<sp/>{<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>cn;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rp<sp/>=<sp/>queue.<ref refid="classparser_1_1tokenqueue_1a69326556cef2a89af0eb7310d2eb19d3" kindref="member">getRestorePoint</ref>();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(rep.<ref refid="classparser_1_1repeat_1a20153be6931a239d9aa32cf0adb948ac" kindref="member">hasRepetitionsRemaining</ref>(cn.<ref refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" kindref="member">children</ref>.size())){</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>node;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>queue.<ref refid="classparser_1_1tokenqueue_1a69326556cef2a89af0eb7310d2eb19d3" kindref="member">getRestorePoint</ref>();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!rl-&gt;tryParse(queue,<sp/>&amp;node)){</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue.<ref refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" kindref="member">restore</ref>(r);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cn.<ref refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" kindref="member">children</ref>.push_back(node);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rep.<ref refid="classparser_1_1repeat_1a5034ec8bb7dd25a9c6f53a62875aace3" kindref="member">inRange</ref>(cn.<ref refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" kindref="member">children</ref>.size())){</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ref<sp/>=<sp/>cn;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue.<ref refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" kindref="member">restore</ref>(rp);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="classparser_1_1terminal" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparser_1_1terminal" kindref="compound">terminal</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="262" refid="classparser_1_1terminal_1a497d13e62829b69f558be62614846236" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref>&amp;<sp/><ref refid="classparser_1_1terminal_1a497d13e62829b69f558be62614846236" kindref="member">lex</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="264" refid="classparser_1_1terminal_1a0029f9a855c1d9dd6939c8fdd5107d72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1terminal_1a0029f9a855c1d9dd6939c8fdd5107d72" kindref="member">terminal</ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref>&amp;<sp/>lex):<sp/>lex(lex)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267" refid="classparser_1_1terminal_1a04f78fdc1855ad6a61909d1c9ae0df13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1terminal_1a04f78fdc1855ad6a61909d1c9ae0df13" kindref="member">~terminal</ref>(){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270" refid="classparser_1_1terminal_1abf7f4ea72388f2e96140769bc5d2acc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal_1abf7f4ea72388f2e96140769bc5d2acc8" kindref="member">tryParse</ref>(<ref refid="classparser_1_1tokenqueue" kindref="compound">tokenqueue</ref>&amp;<sp/>queue,<sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref>*<sp/>ref){</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>node;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(queue.<ref refid="classparser_1_1tokenqueue_1a177e88ad8ccef06bb18777fe59fff7bd" kindref="member">hasNext</ref>()<sp/>&amp;&amp;<sp/>queue.<ref refid="classparser_1_1tokenqueue_1afa7d5f0dcdce020660def60538c9f7eb" kindref="member">peek</ref>().<ref refid="structlexical_1_1match_1a346ef13017b47ee41a6abe643e5732e1" kindref="member">lexemeptr</ref><sp/>==<sp/>&amp;lex){</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.<ref refid="structparser_1_1parsetree_1a4ee1d9214dd2a25fcf0494afaa9be7d7" kindref="member">value</ref><sp/>=<sp/>queue.<ref refid="classparser_1_1tokenqueue_1aa8c2fdc681835f88dfe43659d18b0922" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ref<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="classparser_1_1sequence" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparser_1_1sequence" kindref="compound">sequence</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="286" refid="classparser_1_1sequence_1ad21658f30f62d93e41c2f10b6a8f004d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ruleptr<sp/><ref refid="classparser_1_1sequence_1ad21658f30f62d93e41c2f10b6a8f004d" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="287" refid="classparser_1_1sequence_1adb4d13535498d0d639a11443b9d869e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ruleptr<sp/><ref refid="classparser_1_1sequence_1adb4d13535498d0d639a11443b9d869e0" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="289" refid="classparser_1_1sequence_1a360c88bf21abc2066043c03735b5341f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1sequence_1a360c88bf21abc2066043c03735b5341f" kindref="member">sequence</ref>(ruleptr<sp/>first,<sp/>ruleptr<sp/>next):<sp/>left(first),<sp/>right(next)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292" refid="classparser_1_1sequence_1ac7681fd304c236f9667f48d6d53ffee7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1sequence_1ac7681fd304c236f9667f48d6d53ffee7" kindref="member">~sequence</ref>(){</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295" refid="classparser_1_1sequence_1a499005d2dd4a3f39985d2deddb413cea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1sequence_1a499005d2dd4a3f39985d2deddb413cea" kindref="member">tryParse</ref>(<ref refid="classparser_1_1tokenqueue" kindref="compound">tokenqueue</ref>&amp;<sp/>queue,<sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref>*<sp/>ref)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>node;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>queue.<ref refid="classparser_1_1tokenqueue_1a69326556cef2a89af0eb7310d2eb19d3" kindref="member">getRestorePoint</ref>();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>ln;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>rn;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!left-&gt;tryParse(queue,<sp/>&amp;ln)){</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue.<ref refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" kindref="member">restore</ref>(r);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!right-&gt;tryParse(queue,<sp/>&amp;rn)){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue.<ref refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" kindref="member">restore</ref>(r);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.<ref refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" kindref="member">children</ref>.push_back(ln);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.<ref refid="structparser_1_1parsetree_1a46c4ae92fc6d3fb1ac7cbe2827728149" kindref="member">children</ref>.push_back(rn);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ref<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal">};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="classparser_1_1choice" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparser_1_1choice" kindref="compound">choice</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1rule" kindref="compound">rule</ref><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="320" refid="classparser_1_1choice_1a7ddb22bce6c8446a35a6fbc9ceaaf962" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ruleptr<sp/><ref refid="classparser_1_1choice_1a7ddb22bce6c8446a35a6fbc9ceaaf962" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="321" refid="classparser_1_1choice_1a5cd2aac2dea54c11da1495cacd00db10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ruleptr<sp/><ref refid="classparser_1_1choice_1a5cd2aac2dea54c11da1495cacd00db10" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="323" refid="classparser_1_1choice_1ae9e624b9260ed9006741d6870ea334e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1choice_1ae9e624b9260ed9006741d6870ea334e4" kindref="member">choice</ref>(ruleptr<sp/>first,<sp/>ruleptr<sp/>second):<sp/>left(first),<sp/>right(second)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326" refid="classparser_1_1choice_1ad6fe3cd8e19171e387c8ff34e1291f83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparser_1_1choice_1ad6fe3cd8e19171e387c8ff34e1291f83" kindref="member">~choice</ref>(){</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329" refid="classparser_1_1choice_1a76d73bd6b3adb0c8a062b46a4d49cd11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1choice_1a76d73bd6b3adb0c8a062b46a4d49cd11" kindref="member">tryParse</ref>(<ref refid="classparser_1_1tokenqueue" kindref="compound">tokenqueue</ref>&amp;<sp/>queue,<sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref>*<sp/>ref){</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparser_1_1parsetree" kindref="compound">parsetree</ref><sp/>node;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>queue.<ref refid="classparser_1_1tokenqueue_1a69326556cef2a89af0eb7310d2eb19d3" kindref="member">getRestorePoint</ref>();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(left-&gt;tryParse(queue,<sp/>&amp;node)){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ref<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue.<ref refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" kindref="member">restore</ref>(r);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(right-&gt;tryParse(queue,<sp/>&amp;node)){</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ref<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue.<ref refid="classparser_1_1tokenqueue_1a39e90ab211fa63af79852763312f3242" kindref="member">restore</ref>(r);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal">};</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unitary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="parser_8hpp_1a722923e496599a4427f533b0c347e3f0" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a722923e496599a4427f533b0c347e3f0" kindref="member">operator * </ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeater" kindref="compound">parser::repeater</ref>(right,<sp/><ref refid="namespaceparser_1ac46e69b1e6ac0db5fa1b987e69e0c64e" kindref="member">parser::KLEENE_STAR</ref>));</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="parser_8hpp_1a971b8d5e9b8114ff9b5940fad5fc98f4" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a971b8d5e9b8114ff9b5940fad5fc98f4" kindref="member">operator + </ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeater" kindref="compound">parser::repeater</ref>(right,<sp/><ref refid="namespaceparser_1a97ed17cb3337d680cb84ca3f2af8c2dd" kindref="member">parser::KLEENE_PLUS</ref>));</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="parser_8hpp_1a3613c7c9db8f7e35060e86555ed82006" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a3613c7c9db8f7e35060e86555ed82006" kindref="member">operator!</ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeater" kindref="compound">parser::repeater</ref>(right,<sp/><ref refid="namespaceparser_1ac97f2803cfa3a6e9328865ea4744d4d6" kindref="member">parser::KLEENE_OPTIONAL</ref>));</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="parser_8hpp_1a010182413c1f69e351a507067f73e307" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a722923e496599a4427f533b0c347e3f0" kindref="member">operator * </ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>pt<sp/>=<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(right));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeater" kindref="compound">parser::repeater</ref>(pt,<sp/><ref refid="namespaceparser_1ac46e69b1e6ac0db5fa1b987e69e0c64e" kindref="member">parser::KLEENE_STAR</ref>));</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="parser_8hpp_1a0150c00791055dedf9b8ea4335a00151" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a971b8d5e9b8114ff9b5940fad5fc98f4" kindref="member">operator + </ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>pt<sp/>=<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(right));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeater" kindref="compound">parser::repeater</ref>(pt,<sp/><ref refid="namespaceparser_1a97ed17cb3337d680cb84ca3f2af8c2dd" kindref="member">parser::KLEENE_PLUS</ref>));</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="parser_8hpp_1a032b3d4cc0c96c7b43edf8290128bbb3" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a3613c7c9db8f7e35060e86555ed82006" kindref="member">operator!</ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>pt<sp/>=<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(right));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1repeater" kindref="compound">parser::repeater</ref>(pt,<sp/><ref refid="namespaceparser_1ac97f2803cfa3a6e9328865ea4744d4d6" kindref="member">parser::KLEENE_OPTIONAL</ref>));</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="parser_8hpp_1a27dd049f5fefd3819dce94f81bcaea5b" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a27dd049f5fefd3819dce94f81bcaea5b" kindref="member">operator &lt;&lt; </ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>left,<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1sequence" kindref="compound">parser::sequence</ref>(left,<sp/>right));</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="parser_8hpp_1a40a3cfa71695ff27939e79879070a7b6" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a27dd049f5fefd3819dce94f81bcaea5b" kindref="member">operator &lt;&lt; </ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>left,<sp/><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1sequence" kindref="compound">parser::sequence</ref>(left,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(right))));</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="parser_8hpp_1a01e9bb412dfdf4084df429b5cb9ad25c" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a27dd049f5fefd3819dce94f81bcaea5b" kindref="member">operator &lt;&lt; </ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>left,<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1sequence" kindref="compound">parser::sequence</ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(left)),<sp/>right));</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="parser_8hpp_1addcf969a66b1191560d0702cbfef8087" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a27dd049f5fefd3819dce94f81bcaea5b" kindref="member">operator &lt;&lt; </ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>left,<sp/><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1sequence" kindref="compound">parser::sequence</ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(left)),</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(right))));</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="parser_8hpp_1a83ae991f5883e5298c5000de800d5c60" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a83ae991f5883e5298c5000de800d5c60" kindref="member">operator | </ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>left,<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1choice" kindref="compound">parser::choice</ref>(left,<sp/>right));</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="parser_8hpp_1a382e1d6e85a342495aa289d72f01873a" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a83ae991f5883e5298c5000de800d5c60" kindref="member">operator | </ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>left,<sp/><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1choice" kindref="compound">parser::choice</ref>(left,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(right))));</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="parser_8hpp_1ac94f7bc23c74a7071b4a3c09fadac754" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a83ae991f5883e5298c5000de800d5c60" kindref="member">operator | </ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>left,<sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1choice" kindref="compound">parser::choice</ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(left)),<sp/>right));</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="parser_8hpp_1ae0c60b97dec81fe6c23646c03d2f4223" refkind="member"><highlight class="normal"><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref><sp/><ref refid="parser_8hpp_1a83ae991f5883e5298c5000de800d5c60" kindref="member">operator | </ref>(<ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>left,<sp/><ref refid="classlexical_1_1lexeme" kindref="compound">lexeme</ref><sp/>&amp;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1choice" kindref="compound">parser::choice</ref>(<ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(left)),</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceparser_1a85b2df48287fddaca144a5f6c01b4761" kindref="member">parser::ruleptr</ref>((<ref refid="classparser_1_1rule" kindref="compound">parser::rule</ref><sp/>*<sp/>)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparser_1_1terminal" kindref="compound">parser::terminal</ref>(right))));</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/runtime/parser.hpp"/>
  </compounddef>
</doxygen>
