//------------------------------------------------------------
//Deutsch algorithm:
//The Deutsch algorithm is the simplest quantum algorithm.
//The purpose of the Deutsch algorithm is to demonstrate how quantum paralellization can be used to solve problems faster.
//This algorithm determines if a function is constant or balanced (F(0) == F(1)).
//Classically, this can be found by computing both F(0) and F(1) and comparing them. Quantum mechanically we can just query the function once.
//Two examples are shown below. The first for a function where F(0) != F(1); the second where F(0) = F(1)
//------------------------------------------------------------

//------------------------------------------------------------
//Setup
//------------------------------------------------------------
qreg q[2]
creg c[1]

//------------------------------------------------------------
//Prepare qubit 2 in the state (1/sqrt(2))(|0> - |1>)
//------------------------------------------------------------
h q1
z q1

//------------------------------------------------------------
//Apply hadamard to qubit 1
//------------------------------------------------------------
h q0

//------------------------------------------------------------
//Create Controlled - U operator (Uf) representing the function F(x).
//------------------------------------------------------------
//For function f:{0,1} -> {0,1} where f(0) = 0 and f(1) = 1
//As a matrix, F is described as follows
//[ <0|f|0>, <0|f|1> ] = [ <0|0>, <0|1> ] = [ 1, 0 ]
//[ <1|f|0>, <1|f|1> ]   [ <1|0>, <1|1> ]   [ 0, 1 ]
//Uf is described as follows
//Uf|xy> = |x>|y XOR f(x)>
//Uf|00> = |0>|0 XOR f(0)> = |00>
//Uf|01> = |0>|1 XOR f(0)> = |01>
//Uf|10> = |1>|0 XOR f(1)> = |11>
//Uf|11> = |1>|1 XOR f(1)> = |10>
//[ <00|Uf|00>, <00|Uf|01>, <00|Uf|10>, <00|Uf|11> ]   [ <00|00>, <00|01>, <00|11>, <00|10> ]   [ 1, 0, 0, 0 ]
//[ <01|Uf|00>, <01|Uf|01>, <01|Uf|10>, <01|Uf|11> ] = [ <01|00>, <01|01>, <01|11>, <01|10> ] = [ 0, 1, 0, 0 ]
//[ <10|Uf|00>, <10|Uf|01>, <10|Uf|10>, <10|Uf|11> ]   [ <10|00>, <10|01>, <10|11>, <10|10> ]   [ 0, 0, 0, 1 ]
//[ <11|Uf|00>, <11|Uf|01>, <11|Uf|10>, <11|Uf|11> ]   [ <11|00>, <11|01>, <11|11>, <11|10> ]   [ 0, 0, 1, 0 ]
.balanced
    //cnot q0 q1

//For f: {0,1} -> {0,1} where f(0) = f(1) = 1
//As a matrix, F is described as follows
//[ <0|f|0>, <0|f|1> ] = [ <0|1>, <0|1> ] = [ 0, 0 ]
//[ <1|f|0>, <1|f|1> ]   [ <1|1>, <1|1> ]   [ 1, 1 ]
//Uf is described as follows
//Uf|xy> = |x>|y XOR f(x)>
//Uf|00> = |0>|0 XOR f(0)> = |01>
//Uf|01> = |0>|1 XOR f(0)> = |00>
//Uf|10> = |1>|0 XOR F(1)> = |11>
//Uf|11> = |1>|1 XOR f(1)> = |10>
//[ <00|Uf|00>, <00|Uf|01>, <00|Uf|10>, <00|Uf|11> ]   [ <00|01>, <00|00>, <00|11>, <00|10> ]   [ 0, 1, 0, 0 ]
//[ <01|Uf|00>, <01|Uf|01>, <01|Uf|10>, <01|Uf|11> ] = [ <01|01>, <01|00>, <01|11>, <01|10> ] = [ 1, 0, 0, 0 ]
//[ <10|Uf|00>, <10|Uf|01>, <10|Uf|10>, <10|Uf|11> ]   [ <10|01>, <10|00>, <10|11>, <10|10> ]   [ 0, 0, 0, 1 ]
//[ <11|Uf|00>, <11|Uf|01>, <11|Uf|10>, <11|Uf|11> ]   [ <11|01>, <11|00>, <11|11>, <11|10> ]   [ 0, 0, 1, 0 ]
.unbalanced
    x q1

//------------------------------------------------------------
//Apply hadamard to qubit 1
//------------------------------------------------------------
h q0

//------------------------------------------------------------
//Get the results. For unbalancd example c = 1 and for balanced example c = 0.
//------------------------------------------------------------
measure q0 -> c0
print c